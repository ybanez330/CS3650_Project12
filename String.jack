class String {
    field int length, max;
    field Array chars;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let chars = Array.new(maxLength);

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        chars[j] = c;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        var Array appended;
        var int i;

        if (length = max | length > max) {
            let appended = Array.new(max * 2);
            let max = max * 2;
            let i = 0;
            while (i < max) {
                appended[i] = chars[i];
            }
            do chars.dispose();
            chars = appended;
        }
        chars[length] = c;
        let length = length + 1;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i, d;
        let i = 0;
        let val = 0;

        while (i < length) {
            let d = str.charAt(i) - 48;
            val = val * 10 + d;
        }

        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit;
        var Array chrs;
        var char c;
        let chrs = Array.new(10);;
        do chars.dispose();
        let chars = chrs;

        while (val > 10) {
            let c = lastDigit + 48;
            this.appendChar(c);

            val = val / 10;
        }

        let c = lastDigit + 48;
        this.appendChar(c);
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
