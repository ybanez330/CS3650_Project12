class Screen {
    static boolean currentColor;
    /** Initializes the Screen. */
    function void init() {
        let currentColor = false;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int x, y;
        let x = 0;
        let y = 0;
        do setColor(false);
        while (x < 256) {
            let y = 0;
            while (y < 512) {
                do drawPixel(x, y);
                let y = y + 1;
            }
            let x = x + 1;
        }
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currentColor = b;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int pos, val, base;
        let base = 16384;
        let pos = (row * 32) + (col/16);
        let val = Memory.peek(base + pos);

        // col % 16
        if (currentColor) {
            let val = val | Math.bit(val, Math.mod(x, 16));
        } else {
            let val = val & ~(Math.bit(val. Math.mod(x, 16)));
        }
        

        do Memory.poke(base + pos, val);
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var x, y, dx, dy, a, b;

        let x = x1;
        let y = y1;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let diff = 0;

        while ((a < dx | a = dx) & (b < dy | b = dy)) {
            drawPixel(x + a, y + b);
            if (diff < 0) {
                a = a + 1;
                diff = diff + dy;
            } else {
                b = b + 1;
                diff = diff - dx;
            }
        }
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        drawLine(x1, y1, x1, y2);
        drawLine(x1, y1, x2, y1);
        drawLine(x2, y1, x2, y2);
        drawLine(x1, y2, x2, y2);
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        let dy = -r;

        while (~(dy = r)) {
            drawLine(x - sqrt((r * r) - d * y * y), y + dy, x + sqrt((r * r) - d * y * y), y + dy)
        }
    }
}
